"use client"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { MessageCircle, Send, Bot, User, X, Minimize2, Maximize2 } from "lucide-react"
import Link from "next/link"

interface Message {
  id: number
  type: "user" | "bot"
  content: string
  timestamp: Date
}

interface ChatBotProps {
  initialMessages?: Message[]
}

export default function ChatBot({ initialMessages = [] }: ChatBotProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [messages, setMessages] = useState<Message[]>(() => {
    // Load from localStorage on initialization
    if (typeof window !== "undefined") {
      const savedMessages = localStorage.getItem("ai-chat-history")
      if (savedMessages) {
        const parsedMessages = JSON.parse(savedMessages)
        // Convert timestamp strings back to Date objects
        const messagesWithDates = parsedMessages.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp),
        }))
        return messagesWithDates
      }
    }

    // Default messages if no history
    return [
      {
        id: 1,
        type: "bot",
        content:
          "Xin ch√†o! T√¥i l√† AI t∆∞ v·∫•n c·ªßa OG Camping. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m g√≥i d·ªãch v·ª• ph√π h·ª£p. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?",
        timestamp: new Date(),
      },
      ...initialMessages,
    ]
  })
  const [inputMessage, setInputMessage] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Save messages to localStorage whenever messages change
  useEffect(() => {
    if (typeof window !== "undefined" && messages.length > 0) {
      localStorage.setItem("ai-chat-history", JSON.stringify(messages))
    }
  }, [messages])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const quickQuestions = [
    "G√≥i n√†o ph√π h·ª£p cho gia ƒë√¨nh?",
    "T∆∞ v·∫•n thi·∫øt b·ªã c·∫Øm tr·∫°i",
    "So s√°nh gi√° c√°c g√≥i",
    "ƒê·ªãa ƒëi·ªÉm c·∫Øm tr·∫°i ƒë·∫πp",
  ]

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return

    const newUserMessage: Message = {
      id: messages.length + 1,
      type: "user",
      content: inputMessage,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, newUserMessage])
    setInputMessage("")
    setIsTyping(true)

    // Simulate AI response
    setTimeout(() => {
      const aiResponse: Message = {
        id: messages.length + 2,
        type: "bot",
        content: generateAIResponse(inputMessage),
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, aiResponse])
      setIsTyping(false)
    }, 1500)
  }

  const generateAIResponse = (userMessage: string) => {
    const lowerMessage = userMessage.toLowerCase()

    if (lowerMessage.includes("gia ƒë√¨nh")) {
      return `Tuy·ªát v·ªùi! D·ª±a tr√™n nhu c·∫ßu c·∫Øm tr·∫°i gia ƒë√¨nh c·ªßa b·∫°n, t√¥i khuy√™n b·∫°n n√™n xem x√©t:

üèïÔ∏è **G√≥i C·∫Øm tr·∫°i gia ƒë√¨nh ƒê√† L·∫°t** - 3.200.000ƒë
‚Ä¢ Th·ªùi gian: 2-4 ng√†y
‚Ä¢ Ph√π h·ª£p: 6-10 ng∆∞·ªùi
‚Ä¢ Bao g·ªìm: L·ªÅu l·ªõn, ho·∫°t ƒë·ªông tr·∫ª em, BBQ
‚Ä¢ ƒê√°nh gi√°: 4.7/5 ‚≠ê

G√≥i n√†y c√≥ nhi·ªÅu ho·∫°t ƒë·ªông an to√†n cho tr·∫ª em v√† kh√¥ng gian r·ªông r√£i. B·∫°n c√≥ mu·ªën t√¥i t∆∞ v·∫•n th√™m v·ªÅ chi ti·∫øt kh√¥ng?`
    }

    if (lowerMessage.includes("thi·∫øt b·ªã")) {
      return `D·ª±a tr√™n lo·∫°i h√¨nh c·∫Øm tr·∫°i b·∫°n quan t√¢m, t√¥i g·ª£i √Ω nh·ªØng thi·∫øt b·ªã c·∫ßn thi·∫øt:

üéí **Thi·∫øt b·ªã c∆° b·∫£n:**
‚Ä¢ L·ªÅu c·∫Øm tr·∫°i 4 ng∆∞·ªùi - 150.000ƒë/ng√†y
‚Ä¢ T√∫i ng·ªß cao c·∫•p - 120.000ƒë/ng√†y  
‚Ä¢ ƒê√®n pin LED si√™u s√°ng - 50.000ƒë/ng√†y
‚Ä¢ B·∫øp gas mini - 80.000ƒë/ng√†y

üí° **G·ª£i √Ω:** N·∫øu ƒëi c·∫Øm tr·∫°i n√∫i, n√™n thu√™ th√™m √°o ·∫•m v√† gi√†y trekking. B·∫°n c√≥ mu·ªën t√¥i t∆∞ v·∫•n g√≥i thi·∫øt b·ªã ph√π h·ª£p kh√¥ng?`
    }

    if (lowerMessage.includes("gi√°") || lowerMessage.includes("so s√°nh")) {
      return `T√¥i hi·ªÉu b·∫°n quan t√¢m ƒë·∫øn gi√° c·∫£. D∆∞·ªõi ƒë√¢y l√† c√°c g√≥i theo m·ª©c gi√°:

üí∞ **D∆∞·ªõi 2 tri·ªáu:**
‚Ä¢ C·∫Øm tr·∫°i bi·ªÉn Ph√∫ Qu·ªëc - 1.800.000ƒë
‚Ä¢ C·∫Øm tr·∫°i sa m·∫°c M≈©i N√© - 1.500.000ƒë

üí∞ **2-3 tri·ªáu:**
‚Ä¢ C·∫Øm tr·∫°i n√∫i Sapa - 2.500.000ƒë
‚Ä¢ C·∫Øm tr·∫°i r·ª´ng C√°t Ti√™n - 2.800.000ƒë

üí∞ **Tr√™n 3 tri·ªáu:**
‚Ä¢ C·∫Øm tr·∫°i gia ƒë√¨nh ƒê√† L·∫°t - 3.200.000ƒë

B·∫°n c√≥ ng√¢n s√°ch d·ª± ki·∫øn bao nhi√™u ƒë·ªÉ t√¥i t∆∞ v·∫•n ch√≠nh x√°c h∆°n?`
    }

    return `C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m v·ªÅ:
‚Ä¢ S·ªë ng∆∞·ªùi tham gia?
‚Ä¢ Th·ªùi gian d·ª± ki·∫øn (bao nhi√™u ng√†y)?
‚Ä¢ Ng√¢n s√°ch d·ª± t√≠nh?
‚Ä¢ Lo·∫°i ƒë·ªãa ƒëi·ªÉm y√™u th√≠ch (n√∫i, bi·ªÉn, r·ª´ng...)?`
  }

  const handleQuickQuestion = (question: string) => {
    setInputMessage(question)
  }

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          className="h-14 w-14 rounded-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 shadow-lg hover:shadow-xl transition-all duration-300 text-white border-0"
          size="lg"
        >
          <MessageCircle className="w-6 h-6" />
        </Button>
      </div>
    )
  }

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Card className={`w-80 shadow-2xl border-0 ${isMinimized ? "h-16" : "h-96"} transition-all duration-300`}>
        <CardHeader className="p-3 bg-gradient-to-r from-green-500 to-green-600 text-black rounded-t-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Avatar>
                      <AvatarImage src="/ai-avatar.jpg" />
                      <AvatarFallback className="bg-green-700 text-black">
                        <Bot className="w-5 h-5" />
                      </AvatarFallback>
              </Avatar>
              <div>
                <CardTitle className="text-sm text-green">OG Camping</CardTitle>
                <Badge className="bg-green-400 text-green-900 text-xs hover:bg-green-400">Online</Badge>
              </div>
            </div>
            <div className="flex items-center gap-1">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsMinimized(!isMinimized)}
                className="h-6 w-6 p-0 text-black hover:bg-green-600"
              >
                {isMinimized ? <Maximize2 className="w-3 h-3" /> : <Minimize2 className="w-3 h-3" />}
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsOpen(false)}
                className="h-6 w-6 p-0 text-black hover:bg-green-600"
              >
                <X className="w-3 h-3" />
              </Button>
            </div>
          </div>
        </CardHeader>

        {!isMinimized && (
          <>
            <CardContent className="p-0 h-64 overflow-y-auto bg-gray-50">
              <div className="p-3 space-y-3">
                {messages.map((message) => (
                  <div key={message.id} className={`flex gap-2 ${message.type === "user" ? "flex-row-reverse" : ""}`}>
                    <Avatar className="w-6 h-6 flex-shrink-0">
                      {message.type === "bot" ? (
                        <AvatarFallback className="bg-green-100 text-green-600">
                                       <img src="/ai-avatar.jpg" className="h-auto w-auto rounded-full object-cover group-hover:scale-110 transition-transform duration-300" />
                        </AvatarFallback>
                      ) : (
                        <AvatarFallback className="bg-blue-100 text-blue-600">
                          <User className="w-3 h-3" />
                        </AvatarFallback>
                      )}
                    </Avatar>
                    <div
                      className={`max-w-[80%] rounded-lg p-2 text-xs ${
                        message.type === "user"
                          ? "bg-blue-500 text-white"
                          : "bg-white text-gray-800 border border-gray-200"
                      }`}
                    >
                      <div className="whitespace-pre-wrap break-words">{message.content}</div>
                      <div className={`text-xs mt-1 ${message.type === "user" ? "text-blue-100" : "text-gray-400"}`}>
                        {message.timestamp.toLocaleTimeString("vi-VN", {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </div>
                    </div>
                  </div>
                ))}

                {isTyping && (
                  <div className="flex gap-2">
                    <Avatar className="w-6 h-6 flex-shrink-0">
                      <AvatarFallback className="bg-green-100 text-green-600">
                                      <img src="/ai-avatar.jpg" className="h-auto w-auto rounded-full object-cover group-hover:scale-110 transition-transform duration-300" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="bg-white border border-gray-200 rounded-lg p-2">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div
                          className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.1s" }}
                        ></div>
                        <div
                          className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.2s" }}
                        ></div>
                      </div>
                    </div>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </div>

              {/* Quick Questions */}
              <div className="p-3 border-t bg-white">
                <div className="text-xs text-gray-500 mb-2">C√¢u h·ªèi nhanh:</div>
                <div className="flex flex-wrap gap-1">
                  {quickQuestions.map((question, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      onClick={() => handleQuickQuestion(question)}
                      className="text-xs h-6 px-2 border-green-200 text-green-700 hover:bg-green-50 hover:border-green-300"
                    >
                      {question}
                    </Button>
                  ))}
                </div>
              </div>
            </CardContent>

            <div className="p-3 border-t bg-white rounded-b-lg">
              <div className="flex gap-2 mb-2">
                <Input
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  placeholder="Nh·∫≠p c√¢u h·ªèi..."
                  onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                  className="text-xs h-8 border-gray-300 focus:border-green-500"
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputMessage.trim()}
                  size="sm"
                  className="h-8 w-8 p-0 bg-green-500 hover:bg-green-600 text-white border-0"
                >
                  <Send className="w-3 h-3" />
                </Button>
              </div>
              <div className="text-center">
                <Button
                  variant="link"
                  size="sm"
                  asChild
                  className="text-xs text-green-600 hover:text-green-700 p-0 h-auto"
                >
                  <Link href="/ai-consultant">M·ªü trang t∆∞ v·∫•n ƒë·∫ßy ƒë·ªß</Link>
                </Button>
              </div>
            </div>
          </>
        )}
      </Card>
    </div>
  )
}
